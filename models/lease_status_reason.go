// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LeaseStatusReason A reason behind the lease status.
// "LeaseExpired": The lease exceeded its expiration time ("expiresOn") and
// the associated account was reset and returned to the account pool.
// "LeaseOverBudget": The lease exceeded its budgeted amount and the
// associated account was reset and returned to the account pool.
// "LeaseDestroyed": The lease was adminstratively ended, which can be done
// via the leases API.
// "LeaseActive": The lease is active.
// "LeaseRolledBack": A system error occurred while provisioning the lease.
// and it was rolled back.
//
// swagger:model leaseStatusReason
type LeaseStatusReason string

const (

	// LeaseStatusReasonLeaseExpired captures enum value "LeaseExpired"
	LeaseStatusReasonLeaseExpired LeaseStatusReason = "LeaseExpired"

	// LeaseStatusReasonLeaseOverBudget captures enum value "LeaseOverBudget"
	LeaseStatusReasonLeaseOverBudget LeaseStatusReason = "LeaseOverBudget"

	// LeaseStatusReasonLeaseDestroyed captures enum value "LeaseDestroyed"
	LeaseStatusReasonLeaseDestroyed LeaseStatusReason = "LeaseDestroyed"

	// LeaseStatusReasonLeaseActive captures enum value "LeaseActive"
	LeaseStatusReasonLeaseActive LeaseStatusReason = "LeaseActive"

	// LeaseStatusReasonLeaseRolledBack captures enum value "LeaseRolledBack"
	LeaseStatusReasonLeaseRolledBack LeaseStatusReason = "LeaseRolledBack"
)

// for schema
var leaseStatusReasonEnum []interface{}

func init() {
	var res []LeaseStatusReason
	if err := json.Unmarshal([]byte(`["LeaseExpired","LeaseOverBudget","LeaseDestroyed","LeaseActive","LeaseRolledBack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		leaseStatusReasonEnum = append(leaseStatusReasonEnum, v)
	}
}

func (m LeaseStatusReason) validateLeaseStatusReasonEnum(path, location string, value LeaseStatusReason) error {
	if err := validate.Enum(path, location, value, leaseStatusReasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this lease status reason
func (m LeaseStatusReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLeaseStatusReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
