// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Lease Lease Details
// swagger:model lease
type Lease struct {

	// accountId of the AWS account
	AccountID string `json:"accountId,omitempty"`

	// budget amount
	BudgetAmount float64 `json:"budgetAmount,omitempty"`

	// budget currency
	BudgetCurrency string `json:"budgetCurrency,omitempty"`

	// budget notification emails
	BudgetNotificationEmails []string `json:"budgetNotificationEmails"`

	// creation date in epoch seconds
	CreatedOn float64 `json:"createdOn,omitempty"`

	// Lease ID
	ID string `json:"id,omitempty"`

	// date last modified in epoch seconds
	LastModifiedOn float64 `json:"lastModifiedOn,omitempty"`

	// Status of the Lease.
	// "Active": The principal is leased and has access to the account
	// "Decommissioned": The principal was previously leased to the account, but now is not.
	// "FinanceLock": The principal is leased to the account, but has hit a budget threshold, and is locked out of the account.
	// "ResetLock": The principal is leased to the account, but the account is being reset. The principal's access is temporarily revoked, and will be given back after the reset process is complete.
	// "ResetFinanceLock": The principal is leased to the account, but has been locked out for hitting a budget threshold. Additionally, the account is being reset. After reset, the principal's access will _not_ be restored, and the LeaseStatus will be set back to `ResetLock`.
	//
	// Enum: [Active Decommissioned FinanceLock ResetLock ResetFinanceLock]
	LeaseStatus string `json:"leaseStatus,omitempty"`

	// date lease status was last modified in epoch seconds
	LeaseStatusModifiedOn float64 `json:"leaseStatusModifiedOn,omitempty"`

	// principalId of the lease to get
	PrincipalID string `json:"principalId,omitempty"`

	// date lease should expire in epoch seconds
	RequestedLeaseEnd float64 `json:"requestedLeaseEnd,omitempty"`
}

// Validate validates this lease
func (m *Lease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeaseStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var leaseTypeLeaseStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Decommissioned","FinanceLock","ResetLock","ResetFinanceLock"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		leaseTypeLeaseStatusPropEnum = append(leaseTypeLeaseStatusPropEnum, v)
	}
}

const (

	// LeaseLeaseStatusActive captures enum value "Active"
	LeaseLeaseStatusActive string = "Active"

	// LeaseLeaseStatusDecommissioned captures enum value "Decommissioned"
	LeaseLeaseStatusDecommissioned string = "Decommissioned"

	// LeaseLeaseStatusFinanceLock captures enum value "FinanceLock"
	LeaseLeaseStatusFinanceLock string = "FinanceLock"

	// LeaseLeaseStatusResetLock captures enum value "ResetLock"
	LeaseLeaseStatusResetLock string = "ResetLock"

	// LeaseLeaseStatusResetFinanceLock captures enum value "ResetFinanceLock"
	LeaseLeaseStatusResetFinanceLock string = "ResetFinanceLock"
)

// prop value enum
func (m *Lease) validateLeaseStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, leaseTypeLeaseStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Lease) validateLeaseStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.LeaseStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLeaseStatusEnum("leaseStatus", "body", m.LeaseStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lease) UnmarshalBinary(b []byte) error {
	var res Lease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
