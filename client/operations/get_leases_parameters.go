// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLeasesParams creates a new GetLeasesParams object
// with the default values initialized.
func NewGetLeasesParams() *GetLeasesParams {
	var ()
	return &GetLeasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLeasesParamsWithTimeout creates a new GetLeasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLeasesParamsWithTimeout(timeout time.Duration) *GetLeasesParams {
	var ()
	return &GetLeasesParams{

		timeout: timeout,
	}
}

// NewGetLeasesParamsWithContext creates a new GetLeasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLeasesParamsWithContext(ctx context.Context) *GetLeasesParams {
	var ()
	return &GetLeasesParams{

		Context: ctx,
	}
}

// NewGetLeasesParamsWithHTTPClient creates a new GetLeasesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLeasesParamsWithHTTPClient(client *http.Client) *GetLeasesParams {
	var ()
	return &GetLeasesParams{
		HTTPClient: client,
	}
}

/*GetLeasesParams contains all the parameters to send to the API endpoint
for the get leases operation typically these are written to a http.Request
*/
type GetLeasesParams struct {

	/*AccountID
	  Account ID of the leases.

	*/
	AccountID *string
	/*Limit
	  The maximum number of leases to evaluate (not necessarily the number of matching leases). If there is another page, the URL for page will be in the response Link header.

	*/
	Limit *int64
	/*NextAccountID
	  Account ID with which to begin the scan operation. This is used to traverse through paginated results.

	*/
	NextAccountID *string
	/*NextPrincipalID
	  Principal ID with which to begin the scan operation. This is used to traverse through paginated results.

	*/
	NextPrincipalID *string
	/*PrincipalID
	  Principal ID of the leases.

	*/
	PrincipalID *string
	/*Status
	  Status of the leases.

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get leases params
func (o *GetLeasesParams) WithTimeout(timeout time.Duration) *GetLeasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get leases params
func (o *GetLeasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get leases params
func (o *GetLeasesParams) WithContext(ctx context.Context) *GetLeasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get leases params
func (o *GetLeasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get leases params
func (o *GetLeasesParams) WithHTTPClient(client *http.Client) *GetLeasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get leases params
func (o *GetLeasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get leases params
func (o *GetLeasesParams) WithAccountID(accountID *string) *GetLeasesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get leases params
func (o *GetLeasesParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithLimit adds the limit to the get leases params
func (o *GetLeasesParams) WithLimit(limit *int64) *GetLeasesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get leases params
func (o *GetLeasesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNextAccountID adds the nextAccountID to the get leases params
func (o *GetLeasesParams) WithNextAccountID(nextAccountID *string) *GetLeasesParams {
	o.SetNextAccountID(nextAccountID)
	return o
}

// SetNextAccountID adds the nextAccountId to the get leases params
func (o *GetLeasesParams) SetNextAccountID(nextAccountID *string) {
	o.NextAccountID = nextAccountID
}

// WithNextPrincipalID adds the nextPrincipalID to the get leases params
func (o *GetLeasesParams) WithNextPrincipalID(nextPrincipalID *string) *GetLeasesParams {
	o.SetNextPrincipalID(nextPrincipalID)
	return o
}

// SetNextPrincipalID adds the nextPrincipalId to the get leases params
func (o *GetLeasesParams) SetNextPrincipalID(nextPrincipalID *string) {
	o.NextPrincipalID = nextPrincipalID
}

// WithPrincipalID adds the principalID to the get leases params
func (o *GetLeasesParams) WithPrincipalID(principalID *string) *GetLeasesParams {
	o.SetPrincipalID(principalID)
	return o
}

// SetPrincipalID adds the principalId to the get leases params
func (o *GetLeasesParams) SetPrincipalID(principalID *string) {
	o.PrincipalID = principalID
}

// WithStatus adds the status to the get leases params
func (o *GetLeasesParams) WithStatus(status *string) *GetLeasesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get leases params
func (o *GetLeasesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetLeasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.NextAccountID != nil {

		// query param nextAccountId
		var qrNextAccountID string
		if o.NextAccountID != nil {
			qrNextAccountID = *o.NextAccountID
		}
		qNextAccountID := qrNextAccountID
		if qNextAccountID != "" {
			if err := r.SetQueryParam("nextAccountId", qNextAccountID); err != nil {
				return err
			}
		}

	}

	if o.NextPrincipalID != nil {

		// query param nextPrincipalId
		var qrNextPrincipalID string
		if o.NextPrincipalID != nil {
			qrNextPrincipalID = *o.NextPrincipalID
		}
		qNextPrincipalID := qrNextPrincipalID
		if qNextPrincipalID != "" {
			if err := r.SetQueryParam("nextPrincipalId", qNextPrincipalID); err != nil {
				return err
			}
		}

	}

	if o.PrincipalID != nil {

		// query param principalId
		var qrPrincipalID string
		if o.PrincipalID != nil {
			qrPrincipalID = *o.PrincipalID
		}
		qPrincipalID := qrPrincipalID
		if qPrincipalID != "" {
			if err := r.SetQueryParam("principalId", qPrincipalID); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
