// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUsageParams creates a new GetUsageParams object
// with the default values initialized.
func NewGetUsageParams() *GetUsageParams {
	var ()
	return &GetUsageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsageParamsWithTimeout creates a new GetUsageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUsageParamsWithTimeout(timeout time.Duration) *GetUsageParams {
	var ()
	return &GetUsageParams{

		timeout: timeout,
	}
}

// NewGetUsageParamsWithContext creates a new GetUsageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUsageParamsWithContext(ctx context.Context) *GetUsageParams {
	var ()
	return &GetUsageParams{

		Context: ctx,
	}
}

// NewGetUsageParamsWithHTTPClient creates a new GetUsageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUsageParamsWithHTTPClient(client *http.Client) *GetUsageParams {
	var ()
	return &GetUsageParams{
		HTTPClient: client,
	}
}

/*GetUsageParams contains all the parameters to send to the API endpoint
for the get usage operation typically these are written to a http.Request
*/
type GetUsageParams struct {

	/*EndDate
	  end date of the usage

	*/
	EndDate float64
	/*StartDate
	  start date of the usage

	*/
	StartDate float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get usage params
func (o *GetUsageParams) WithTimeout(timeout time.Duration) *GetUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get usage params
func (o *GetUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get usage params
func (o *GetUsageParams) WithContext(ctx context.Context) *GetUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get usage params
func (o *GetUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get usage params
func (o *GetUsageParams) WithHTTPClient(client *http.Client) *GetUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get usage params
func (o *GetUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get usage params
func (o *GetUsageParams) WithEndDate(endDate float64) *GetUsageParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get usage params
func (o *GetUsageParams) SetEndDate(endDate float64) {
	o.EndDate = endDate
}

// WithStartDate adds the startDate to the get usage params
func (o *GetUsageParams) WithStartDate(startDate float64) *GetUsageParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get usage params
func (o *GetUsageParams) SetStartDate(startDate float64) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param endDate
	if err := r.SetPathParam("endDate", swag.FormatFloat64(o.EndDate)); err != nil {
		return err
	}

	// path param startDate
	if err := r.SetPathParam("startDate", swag.FormatFloat64(o.StartDate)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
