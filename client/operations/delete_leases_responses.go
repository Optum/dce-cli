// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteLeasesReader is a Reader for the DeleteLeases structure.
type DeleteLeasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLeasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLeasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLeasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLeasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLeasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteLeasesOK creates a DeleteLeasesOK with default headers values
func NewDeleteLeasesOK() *DeleteLeasesOK {
	return &DeleteLeasesOK{}
}

/*DeleteLeasesOK handles this case with default header values.

Lease Details
*/
type DeleteLeasesOK struct {
}

func (o *DeleteLeasesOK) Error() string {
	return fmt.Sprintf("[DELETE /leases][%d] deleteLeasesOK ", 200)
}

func (o *DeleteLeasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLeasesBadRequest creates a DeleteLeasesBadRequest with default headers values
func NewDeleteLeasesBadRequest() *DeleteLeasesBadRequest {
	return &DeleteLeasesBadRequest{}
}

/*DeleteLeasesBadRequest handles this case with default header values.

"Failed to Parse Request Body" if the request body is blank or incorrectly formatted. or if there are no account leases found for the specified accountId or if the account specified is not already Active.

*/
type DeleteLeasesBadRequest struct {
}

func (o *DeleteLeasesBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /leases][%d] deleteLeasesBadRequest ", 400)
}

func (o *DeleteLeasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLeasesForbidden creates a DeleteLeasesForbidden with default headers values
func NewDeleteLeasesForbidden() *DeleteLeasesForbidden {
	return &DeleteLeasesForbidden{}
}

/*DeleteLeasesForbidden handles this case with default header values.

Failed to authenticate request
*/
type DeleteLeasesForbidden struct {
}

func (o *DeleteLeasesForbidden) Error() string {
	return fmt.Sprintf("[DELETE /leases][%d] deleteLeasesForbidden ", 403)
}

func (o *DeleteLeasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteLeasesInternalServerError creates a DeleteLeasesInternalServerError with default headers values
func NewDeleteLeasesInternalServerError() *DeleteLeasesInternalServerError {
	return &DeleteLeasesInternalServerError{}
}

/*DeleteLeasesInternalServerError handles this case with default header values.

Server errors if the database cannot be reached.
*/
type DeleteLeasesInternalServerError struct {
}

func (o *DeleteLeasesInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /leases][%d] deleteLeasesInternalServerError ", 500)
}

func (o *DeleteLeasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteLeasesBody delete leases body
swagger:model DeleteLeasesBody
*/
type DeleteLeasesBody struct {

	// account Id
	// Required: true
	AccountID *string `json:"accountId"`

	// principal Id
	// Required: true
	PrincipalID *string `json:"principalId"`
}

// Validate validates this delete leases body
func (o *DeleteLeasesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrincipalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteLeasesBody) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("lease"+"."+"accountId", "body", o.AccountID); err != nil {
		return err
	}

	return nil
}

func (o *DeleteLeasesBody) validatePrincipalID(formats strfmt.Registry) error {

	if err := validate.Required("lease"+"."+"principalId", "body", o.PrincipalID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteLeasesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteLeasesBody) UnmarshalBinary(b []byte) error {
	var res DeleteLeasesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
