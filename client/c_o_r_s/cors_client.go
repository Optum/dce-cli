// Code generated by go-swagger; DO NOT EDIT.

package c_o_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c o r s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c o r s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
OptionsAccounts cs o r s support

Enable CORS by returning correct headers

*/
func (a *Client) OptionsAccounts(params *OptionsAccountsParams) (*OptionsAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsAccounts",
		Method:             "OPTIONS",
		PathPattern:        "/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OptionsAccountsID cs o r s support

Enable CORS by returning correct headers

*/
func (a *Client) OptionsAccountsID(params *OptionsAccountsIDParams) (*OptionsAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsAccountsID",
		Method:             "OPTIONS",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsAccountsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsAccountsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OptionsLeases cs o r s support

Enable CORS by returning correct headers

*/
func (a *Client) OptionsLeases(params *OptionsLeasesParams) (*OptionsLeasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsLeasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsLeases",
		Method:             "OPTIONS",
		PathPattern:        "/leases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsLeasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsLeasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsLeases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OptionsLeasesID cs o r s support

Enable CORS by returning correct headers

*/
func (a *Client) OptionsLeasesID(params *OptionsLeasesIDParams) (*OptionsLeasesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsLeasesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsLeasesID",
		Method:             "OPTIONS",
		PathPattern:        "/leases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsLeasesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsLeasesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsLeasesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OptionsLeasesIDAuth cs o r s support

Enable CORS by returning correct headers

*/
func (a *Client) OptionsLeasesIDAuth(params *OptionsLeasesIDAuthParams) (*OptionsLeasesIDAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsLeasesIDAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsLeasesIDAuth",
		Method:             "OPTIONS",
		PathPattern:        "/leases/{id}/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsLeasesIDAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsLeasesIDAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsLeasesIDAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OptionsUsage cs o r s support

Enable CORS by returning correct headers

*/
func (a *Client) OptionsUsage(params *OptionsUsageParams) (*OptionsUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsUsage",
		Method:             "OPTIONS",
		PathPattern:        "/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
