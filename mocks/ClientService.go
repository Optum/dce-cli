// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import operations "github.com/Optum/dce-cli/client/operations"
import runtime "github.com/go-openapi/runtime"

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// DeleteAccountsID provides a mock function with given fields: params, authInfo
func (_m *ClientService) DeleteAccountsID(params *operations.DeleteAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*operations.DeleteAccountsIDNoContent, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.DeleteAccountsIDNoContent
	if rf, ok := ret.Get(0).(func(*operations.DeleteAccountsIDParams, runtime.ClientAuthInfoWriter) *operations.DeleteAccountsIDNoContent); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteAccountsIDNoContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.DeleteAccountsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLeases provides a mock function with given fields: params, authInfo
func (_m *ClientService) DeleteLeases(params *operations.DeleteLeasesParams, authInfo runtime.ClientAuthInfoWriter) (*operations.DeleteLeasesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.DeleteLeasesOK
	if rf, ok := ret.Get(0).(func(*operations.DeleteLeasesParams, runtime.ClientAuthInfoWriter) *operations.DeleteLeasesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteLeasesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.DeleteLeasesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLeasesID provides a mock function with given fields: params, authInfo
func (_m *ClientService) DeleteLeasesID(params *operations.DeleteLeasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*operations.DeleteLeasesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.DeleteLeasesIDOK
	if rf, ok := ret.Get(0).(func(*operations.DeleteLeasesIDParams, runtime.ClientAuthInfoWriter) *operations.DeleteLeasesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteLeasesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.DeleteLeasesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields: params, authInfo
func (_m *ClientService) GetAccounts(params *operations.GetAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetAccountsOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.GetAccountsOK
	if rf, ok := ret.Get(0).(func(*operations.GetAccountsParams, runtime.ClientAuthInfoWriter) *operations.GetAccountsOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAccountsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetAccountsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsID provides a mock function with given fields: params, authInfo
func (_m *ClientService) GetAccountsID(params *operations.GetAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetAccountsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.GetAccountsIDOK
	if rf, ok := ret.Get(0).(func(*operations.GetAccountsIDParams, runtime.ClientAuthInfoWriter) *operations.GetAccountsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAccountsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetAccountsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuth provides a mock function with given fields: params
func (_m *ClientService) GetAuth(params *operations.GetAuthParams) (*operations.GetAuthOK, error) {
	ret := _m.Called(params)

	var r0 *operations.GetAuthOK
	if rf, ok := ret.Get(0).(func(*operations.GetAuthParams) *operations.GetAuthOK); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAuthOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetAuthParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthFile provides a mock function with given fields: params
func (_m *ClientService) GetAuthFile(params *operations.GetAuthFileParams) (*operations.GetAuthFileOK, error) {
	ret := _m.Called(params)

	var r0 *operations.GetAuthFileOK
	if rf, ok := ret.Get(0).(func(*operations.GetAuthFileParams) *operations.GetAuthFileOK); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAuthFileOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetAuthFileParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeases provides a mock function with given fields: params, authInfo
func (_m *ClientService) GetLeases(params *operations.GetLeasesParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetLeasesOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.GetLeasesOK
	if rf, ok := ret.Get(0).(func(*operations.GetLeasesParams, runtime.ClientAuthInfoWriter) *operations.GetLeasesOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetLeasesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetLeasesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeasesID provides a mock function with given fields: params, authInfo
func (_m *ClientService) GetLeasesID(params *operations.GetLeasesIDParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetLeasesIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.GetLeasesIDOK
	if rf, ok := ret.Get(0).(func(*operations.GetLeasesIDParams, runtime.ClientAuthInfoWriter) *operations.GetLeasesIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetLeasesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetLeasesIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: params, authInfo
func (_m *ClientService) GetUsage(params *operations.GetUsageParams, authInfo runtime.ClientAuthInfoWriter) (*operations.GetUsageOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.GetUsageOK
	if rf, ok := ret.Get(0).(func(*operations.GetUsageParams, runtime.ClientAuthInfoWriter) *operations.GetUsageOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetUsageOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.GetUsageParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostAccounts provides a mock function with given fields: params, authInfo
func (_m *ClientService) PostAccounts(params *operations.PostAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*operations.PostAccountsCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.PostAccountsCreated
	if rf, ok := ret.Get(0).(func(*operations.PostAccountsParams, runtime.ClientAuthInfoWriter) *operations.PostAccountsCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PostAccountsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.PostAccountsParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLeases provides a mock function with given fields: params, authInfo
func (_m *ClientService) PostLeases(params *operations.PostLeasesParams, authInfo runtime.ClientAuthInfoWriter) (*operations.PostLeasesCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.PostLeasesCreated
	if rf, ok := ret.Get(0).(func(*operations.PostLeasesParams, runtime.ClientAuthInfoWriter) *operations.PostLeasesCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PostLeasesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.PostLeasesParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLeasesAuth provides a mock function with given fields: params, authInfo
func (_m *ClientService) PostLeasesAuth(params *operations.PostLeasesAuthParams, authInfo runtime.ClientAuthInfoWriter) (*operations.PostLeasesAuthCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.PostLeasesAuthCreated
	if rf, ok := ret.Get(0).(func(*operations.PostLeasesAuthParams, runtime.ClientAuthInfoWriter) *operations.PostLeasesAuthCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PostLeasesAuthCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.PostLeasesAuthParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLeasesIDAuth provides a mock function with given fields: params, authInfo
func (_m *ClientService) PostLeasesIDAuth(params *operations.PostLeasesIDAuthParams, authInfo runtime.ClientAuthInfoWriter) (*operations.PostLeasesIDAuthCreated, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.PostLeasesIDAuthCreated
	if rf, ok := ret.Get(0).(func(*operations.PostLeasesIDAuthParams, runtime.ClientAuthInfoWriter) *operations.PostLeasesIDAuthCreated); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PostLeasesIDAuthCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.PostLeasesIDAuthParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountsID provides a mock function with given fields: params, authInfo
func (_m *ClientService) PutAccountsID(params *operations.PutAccountsIDParams, authInfo runtime.ClientAuthInfoWriter) (*operations.PutAccountsIDOK, error) {
	ret := _m.Called(params, authInfo)

	var r0 *operations.PutAccountsIDOK
	if rf, ok := ret.Get(0).(func(*operations.PutAccountsIDParams, runtime.ClientAuthInfoWriter) *operations.PutAccountsIDOK); ok {
		r0 = rf(params, authInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.PutAccountsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*operations.PutAccountsIDParams, runtime.ClientAuthInfoWriter) error); ok {
		r1 = rf(params, authInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
