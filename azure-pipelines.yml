# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  # Do not build branches
  branches:
    exclude:
      - "*"
  # Run build on tagged versions
  tags:
    include:
      - "v*"

# Run builds for PRs against `master`
pr:
  - master

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: GoTool@0
  inputs:
    version: '1.13'

- script: |
    set -x
    go version
    go get -v -t -d ./...
  displayName: 'Get dependencies'

- script: |
    set -x
    # etcd depdendency bug workaround. See commends in go.mod for more details.
    go build -v .
    sudo rm /home/vsts/go/pkg/mod/github.com/coreos/etcd@v3.3.10+incompatible/client/keys.generated.go
    make test
  displayName: 'Run tests'

- script: |
    set -x
    mkdir dist && cd dist
    # zip for windows and calculate sha256 hash
    WINFILE=dce_windows_amd64.zip
    env GOOS=windows GOARCH=amd64 go build -v -o ./dce ..
    zip -m $WINFILE ./dce
    WINSHA=$(IFS=' '; read -ra ADDR <<< $(sha256sum $WINFILE); echo "${ADDR[0]}")
    # zip for linux and calculate sha256 hash
    LINFILE=dce_linux_amd64.zip
    env GOOS=linux GOARCH=amd64 go build -v -o ./dce ..
    zip -m $LINFILE ./dce
    LINSHA=$(IFS=' '; read -ra ADDR <<< $(sha256sum $LINFILE); echo "${ADDR[0]}")
    # zip for mac and calculate sha256 hash
    MACFILE=dce_darwin_amd64.zip
    env GOOS=darwin GOARCH=amd64 go build -v -o ./dce ..
    zip -m MACFILE ./dce
    MACSHA=$(IFS=' '; read -ra ADDR <<< $(sha256sum $MACFILE); echo "${ADDR[0]}")
    cat> release.md <<- EOF
    | SHA256  | File |
    |---|---|
    | $MACFILE  | $MACSHA |
    | $LINFILE  | $LINSHA  |
    | $WINFILE  | $WINSHA  |
    EOF
  displayName: 'Build and zip'

# Publish a Github Release for tagged commits
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
- task: GithubRelease@0
  displayName: 'Create GitHub Release'
  inputs:
    action: create
    tagSource: 'auto'
    gitHubConnection: Github
    repositoryName: Optum/dce-cli
    releaseNotesFile: |
      ./dist/release.md
    assets: |
      ./dist/*