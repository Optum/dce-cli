# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  # Do not build branches
  branches:
    exclude:
      - "*"
  # Run build on tagged versions
  tags:
    include:
      - "v*"

# Run builds for PRs against `master`
pr:
  - master

pool:
  vmImage: 'ubuntu-latest'

  container: golang:1.13

variables:
  windows64Dist: ./dist/windows/
  linux64Dist: ./dist/linux/
  darwin64Dist: ./dist/darwin/

steps:

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  displayName: 'Get dependencies'

- script: |
    go test -v ./...
  displayName: 'Run tests'

- script: |
    env GOOS=windows GOARCH=amd64 go build -v -o $(windows64Dist)dce .
    zip $(windows64Dist)dce_windows_amd64.zip $(windows64Dist)dce
    env GOOS=linux GOARCH=amd64 go build -v -o $(linux64Dist)dce .
    zip $(linux64Dist)dce_linux_amd64.zip $(linux64Dist)dce
    env GOOS=darwin GOARCH=amd64 go build -v -o $(darwin64Dist)dce .
    zip $(darwin64Dist)dce_darwin_amd64.zip $(darwin64Dist)dce
  displayName: 'Build and zip'

# Publish a Github Release for tagged commits
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/github-release?view=azure-devops
- task: GithubRelease@0
  displayName: 'Create GitHub Release'
  inputs:
    action: create
    tagSource: 'User specified tag'
    gitHubConnection: Github
    repositoryName: Optum/dce-cli
    isDraft: true
    assets: |
      ./dist/windows/dce_windows_amd64.zip
      ./dist/linux/dce_linux_amd64.zip
      ./dist/darwin/dce_darwin_amd64.zip